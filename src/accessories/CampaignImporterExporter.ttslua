local blessCurseApi     = require("chaosbag/BlessCurseManagerApi")
local chaosBagApi       = require("chaosbag/ChaosBagApi")
local deckImporterApi   = require("arkhamdb/DeckImporterApi")
local guidReferenceApi  = require("core/GUIDReferenceApi")
local optionPanelApi    = require("core/OptionPanelApi")
local playAreaApi       = require("core/PlayAreaApi")
local playmatApi        = require("playermat/PlaymatApi")

-- base data for token creation
local campaignTokenData = {
  Name = "Custom_Model_Bag",
  Transform = {
    posX = -21.25,
    posY = 1.68,
    posZ = 55.59,
    rotX = 0,
    rotY = 270,
    rotZ = 0,
    scaleX = 2,
    scaleY = 2,
    scaleZ = 2
  },
  Description = "SCED Importer Token",
  Tags = { "ImporterToken" },
  CustomMesh = {
    MeshURL = "http://cloud-3.steamusercontent.com/ugc/943949966265929204/A38BB5D72419E6298385556D931877C0A1A55C17/",
    DiffuseURL = "http://cloud-3.steamusercontent.com/ugc/254843371583188147/920981125E37B5CEB6C400E3FD353A2C428DA969/",
    ColliderURL = "http://cloud-3.steamusercontent.com/ugc/943949966265929204/A38BB5D72419E6298385556D931877C0A1A55C17/",
    Convex = true,
    MaterialIndex = 2,
    TypeIndex = 6,
    CustomShader = {
      SpecularColor = {
        r = 0.72,
        g = 0.51,
        b = 0.34
      },
      SpecularIntensity = 0.4,
      SpecularSharpness = 7.0,
      FresnelStrength = 0.0
    }
  }
}

function onLoad()
  self.createButton({
    click_function = "createCampaignToken",
    function_owner = self,
    label = "Export",
    tooltip = "Create a campaign save token!",
    position = { x = -1, y = 0.21, z = 0 },
    font_size = 400,
    width = 1400,
    height = 600,
    scale = { 0.5, 1, 0.5 }
  })
end

function onObjectLeaveContainer(container, _)
  if container.hasTag("ImporterToken") then
    broadcastToAll("Removing objects from the Save Coin bag will break functionality. Please return the removed objects.", "Yellow")
  end
end

function onObjectEnterContainer(container, _)
  if container.hasTag("ImporterToken") then
    broadcastToAll("Adding objects to the Save Coin bag will break functionality. Please remove the objects.", "Yellow")
  end
end

---------------------------------------------------------
-- main import functions (split up to allow for Wait conditions)
---------------------------------------------------------

function onCollisionEnter(info)
  if info.collision_object.hasTag("ImporterToken") then
    importFromToken(info.collision_object)
  end
end

-- Identifies import token, determines campaign box and downloads it (if needed)
function importFromToken(coin)
  broadcastToAll("Campaign Import Initiated")
  local importData = JSON.decode(coin.getGMNotes())
  local campaignBox = getObjectFromGUID(importData["box"])

  if not campaignBox then
    broadcastToAll("Campaign Box not present on table!", "Red")
    return
  end

  if campaignBox.type == "Generic" then
    campaignBox.call("buttonClick_download")
  end

  Wait.condition(
    function()
      local campaignBox = getObjectFromGUID(importData["box"])
      if #campaignBox.getObjects() > 0 then
        placeCampaignFromToken(importData, coin)
      else
        restoreCampaignData(importData, coin)
      end
    end,
    function()
      local obj = getObjectFromGUID(importData["box"])
      if obj == nil then
        return false
      else
        return obj.type == "Bag"
      end
    end,
    2,
    function() broadcastToAll("Error loading campaign box") end
  )
end

-- After box has been downloaded, places content on table
function placeCampaignFromToken(importData, coin)
  getObjectFromGUID(importData["box"]).call("buttonClick_place")
  Wait.condition(
    function() restoreCampaignData(importData, coin) end,
    function() return findUniqueObjectWithTag("CampaignLog") ~= nil end,
    2,
    function() broadcastToAll("Error placing campaign box") end
  )
end

-- After content is placed on table, conducts all the other import operations
function restoreCampaignData(importData, coin)
  -- destroy existing campaign log
  findUniqueObjectWithTag("CampaignLog").destruct()

  -- destroy existing "additional player cards" bag
  if importData["additionalIndex"] then
    guidReferenceApi.getObjectByOwnerAndType("Mythos", "AdditionalPlayerCardsBag").destruct()
  end

  if coin.type == "Bag" then
    -- go over internal items and spawn them at the original position
    for _, objData in ipairs(coin.getData().ContainedObjects) do
      objData["Locked"] = true
      spawnObjectData({data = objData})
    end
  else
    -- support for older save coins that stored the data serialized
    if importData["additionalIndex"] then
      spawnObjectJSON({json = importData["additionalIndex"]})
    end
    spawnObjectData({data = importData["log"]})
  end

  coin.destruct()

  chaosBagApi.setChaosBagState(importData["bag"])

  -- populate trauma values
  if importData["trauma"] then
    setTrauma(importData["trauma"])
  end

  -- populate ArkhamDB deck IDs
  if importData["decks"] then
    deckImporterApi.setUiState(importData["decks"])
  end

  playAreaApi.setInvestigatorCount(importData["clueCount"])

  -- set campaign guide page
  local guide = findUniqueObjectWithTag("CampaignGuide")
  if guide then
    Wait.condition(
    -- Called after the condition function returns true
      function() printToAll("Campaign Guide import successful!") end,
      -- Condition function that is called continuously until it returns true or timeout is reached
      function() return guide.Book.setPage(importData["guide"]) end,
      -- Amount of time in seconds until the Wait times out
      2,
      -- Called if the Wait times out
      function() printToAll("Campaign Guide import failed!") end
    )
  end

  Wait.time(function() optionPanelApi.loadSettings(importData["options"]) end, 0.5)

  -- destroy Tour Starter token
  local tourStarter = guidReferenceApi.getObjectByOwnerAndType("Mythos", "TourStarter")
  if tourStarter then
    tourStarter.destruct()
  end

  -- restore PlayArea image
  playAreaApi.updateSurface(importData["playarea"])

  broadcastToAll("Campaign successfully imported!", "Green")
end

-- Creates a campaign token with save data encoded into GM Notes based on the current state of the table
function createCampaignToken(_, playerColor, _)
  -- find active campaign
  local campaignBox
  for _, obj in ipairs(getObjectsWithTag("CampaignBox")) do
    if obj.type == "Bag" and #obj.getObjects() == 0 then
      if not campaignBox then
        campaignBox = obj
      else
        broadcastToAll("Multiple empty campaign box detected; delete all but one.", "Red")
        return
      end
    end
  end

  if not campaignBox then
    broadcastToAll("Campaign box with all placed objects not found!", "Red")
    return
  end

  local campaignLog = findUniqueObjectWithTag("CampaignLog")
  if campaignLog == nil then
    broadcastToAll("Campaign log not found!", "Red")
    return
  end

  local additionalIndex = guidReferenceApi.getObjectByOwnerAndType("Mythos", "AdditionalPlayerCardsBag")
  local traumaValues = { }
  local trauma = campaignLog.getVar("returnTrauma")

  if trauma ~= nil then
    printToAll("Trauma values found in campaign log!", "Green")
    trauma = campaignLog.call("returnTrauma")
    for _, val in ipairs(trauma) do
      table.insert(traumaValues, val)
    end
  else
    printToAll("Trauma values could not be found in campaign log!", "Yellow")
  end

  local campaignGuide = findUniqueObjectWithTag("CampaignGuide")
  if campaignGuide == nil then
    broadcastToAll("Campaign guide not found!", "Red")
    return
  end

  -- clean up chaos tokens
  blessCurseApi.removeAll(playerColor)
  chaosBagApi.releaseAllSealedTokens(playerColor)

  local campaignData = {
    box = campaignBox.getGUID(),
    log = campaignLog.getPosition(),
    bag = chaosBagApi.getChaosBagState(),
    trauma = traumaValues,
    decks = deckImporterApi.getUiState(),
    clueCount = playAreaApi.getInvestigatorCount(),
    playarea = playAreaApi.getSurface(),
    options = optionPanelApi.getOptions(),
    guide = campaignGuide.Book.getPage(),
    additionalIndex = additionalIndex.getPosition()
  }
  campaignTokenData.GMNotes = JSON.encode(campaignData)
  campaignTokenData.Nickname = campaignBox.getName() .. os.date(" %b %d") .. " Save"
  campaignTokenData.ContainedObjects = { }

  local indexData = additionalIndex.getData()
  indexData.Locked = false
  table.insert(campaignTokenData.ContainedObjects, indexData)

  local logData = campaignLog.getData()
  logData.Locked = false
  table.insert(campaignTokenData.ContainedObjects, logData)

  spawnObjectData({ data = campaignTokenData })
  broadcastToAll("Campaign successfully exported! Save coin object to import on a different save.", "Green")
end

---------------------------------------------------------
-- helper functions
---------------------------------------------------------

function findUniqueObjectWithTag(tag)
  local objects = getObjectsWithTag(tag)
  if not objects then return end

  if #objects == 1 then
    return objects[1]
  else
    broadcastToAll("More than one " .. tag .. " detected; delete all but one.", "Red")
  end
end

function setTrauma(trauma)
  for i, matColor in ipairs({ "White", "Orange", "Green", "Red" }) do
    playmatApi.updateCounter(matColor, "DamageCounter", trauma[i])
    playmatApi.updateCounter(matColor, "HorrorCounter", trauma[i + 4])
  end
end
