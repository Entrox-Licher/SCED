local guidReferenceApi = require("core/GUIDReferenceApi")
local playAreaApi = require("core/PlayAreaApi")
local tokenArrangerApi = require("accessories/TokenArrangerApi")
local tokenChecker = require("core/token/TokenChecker")
local tokenSpawnTrackerApi = require("core/token/TokenSpawnTrackerApi")

local ENCOUNTER_DECK_AREA = {
  upperLeft = { x = 0.9, z = 0.42 },
  lowerRight = { x = 0.86, z = 0.38 },
}
local ENCOUNTER_DISCARD_AREA = {
  upperLeft = { x = 1.62, z = 0.42 },
  lowerRight = { x = 1.58, z = 0.38 },
}

-- global position of encounter deck and discard pile
local ENCOUNTER_DECK_POS = { x = -3.93, y = 1, z = 5.76 }
local ENCOUNTER_DISCARD_POSITION = { x = -3.85, y = 1, z = 10.38 }
local isReshuffling = false

-- scenario metadata
local currentScenario, useFrontData, tokenData

-- object references
local TRASH, DATA_HELPER

-- we use this to turn off collision handling until onLoad() is complete
local collisionEnabled = false

function onLoad(saveState)
  if saveState ~= nil then
    local loadedState = JSON.decode(saveState) or {}
    currentScenario   = loadedState.currentScenario or ""
    useFrontData      = loadedState.useFrontData or true
    tokenData         = loadedState.tokenData or {}
  end
  TRASH = guidReferenceApi.getObjectByOwnerAndType("Mythos", "Trash")
  DATA_HELPER = guidReferenceApi.getObjectByOwnerAndType("Mythos", "DataHelper")
  collisionEnabled = true
end

function onSave()
  return JSON.encode({
    currentScenario = currentScenario,
    useFrontData    = useFrontData,
    tokenData       = tokenData
  })
end

-- TTS event handler.  Handles scenario name event triggering and encounter card token resets.
function onCollisionEnter(collisionInfo)
  if not collisionEnabled then return end
  local object = collisionInfo.collision_object

  if object.getName() == "Scenario" then
    local description = object.getDescription()

    -- detect if a new scenario card is placed down
    if currentScenario ~= description then
      currentScenario = description
      fireScenarioChangedEvent()
    end

    local metadata = JSON.decode(object.getGMNotes()) or {}
    if not metadata["tokens"] then
      tokenData = {}
      return
    end

    -- detect orientation of scenario card (for difficulty)
    useFrontData = not object.is_face_down
    tokenData = metadata["tokens"][(useFrontData and "front" or "back")]
    fireTokenDataChangedEvent()
  end

  local localPos = self.positionToLocal(object.getPosition())
  if inArea(localPos, ENCOUNTER_DECK_AREA) or inArea(localPos, ENCOUNTER_DISCARD_AREA) then
    tokenSpawnTrackerApi.resetTokensSpawned(object.getGUID())
    removeTokensFromObject(object)
  end
end

-- TTS event handler. Handles scenario name event triggering
function onCollisionExit(collisionInfo)
  if not collisionEnabled then return end
  local object = collisionInfo.collision_object

  -- reset token metadata if scenario reference card is removed
  if object.getName() == "Scenario" then
    tokenData = {}
    useFrontData = nil
    fireTokenDataChangedEvent()
  end
end

-- Listens for cards entering the encounter deck or encounter discard, and resets the spawn state
-- for the cards when they do.
function onObjectEnterContainer(container, object)
  local localPos = self.positionToLocal(container.getPosition())
  if inArea(localPos, ENCOUNTER_DECK_AREA) or inArea(localPos, ENCOUNTER_DISCARD_AREA) then
    tokenSpawnTrackerApi.resetTokensSpawned(object.getGUID())
  end
end

-- fires if the scenario title changes
function fireScenarioChangedEvent()
  Wait.frames(function() Global.call('titleSplash', currentScenario) end, 20)
  playAreaApi.onScenarioChanged(currentScenario)
end

-- fires if the scenario title or the difficulty changes
function fireTokenDataChangedEvent()
  local fullData = returnTokenData()
  tokenArrangerApi.onTokenDataChanged(fullData)
end

-- returns the chaos token metadata (if provided)
function returnTokenData()
  return {
    tokenData       = tokenData,
    currentScenario = currentScenario,
    useFrontData    = useFrontData
  }
end

---------------------------------------------------------
-- encounter card drawing
---------------------------------------------------------

-- 'params' contains the position, rotation and a boolean to force a faceup draw
function drawEncounterCard(params)
  local card
  local items = searchArea(ENCOUNTER_DECK_POS, { 3, 1, 4 }, isCardOrDeck)
  if #items > 0 then
    for _, j in ipairs(items) do
      local v = j.hit_object
      if v.tag == 'Deck' then
        card = v.takeObject({ index = 0 })
        break
      end
    end
    -- we didn't find the deck so just pull the first thing we did find
    if card == nil then card = items[1].hit_object end
    actualEncounterCardDraw(card, params)
  else
    -- nothing here, time to reshuffle
    reshuffleEncounterDeck(params)
  end
end

function actualEncounterCardDraw(card, params)
  local faceUpRotation = 0
  if not params.alwaysFaceUp then
    local metadata = JSON.decode(card.getGMNotes()) or {}
    if metadata.hidden or DATA_HELPER.call('checkHiddenCard', card.getName()) then
      faceUpRotation = 180
    end
  end
  card.setPositionSmooth(params.pos, false, false)
  card.setRotationSmooth({ 0, params.rotY, faceUpRotation }, false, false)
end

function reshuffleEncounterDeck(params)
  -- flag to avoid multiple calls
  if isReshuffling then return end
  isReshuffling = true

  -- shuffle and flip deck, draw card after completion
  local discarded = searchArea(ENCOUNTER_DISCARD_POSITION, { 3, 1, 4 }, isDeck)
  if #discarded > 0 then
    local deck = discarded[1].hit_object
    if not deck.is_face_down then deck.flip() end
    deck.shuffle()
    deck.setPositionSmooth(Vector(ENCOUNTER_DECK_POS) + Vector(0, 2, 0), false, true)
    Wait.time(function() actualEncounterCardDraw(deck.takeObject({ index = 0 }), params) end, 0.5)
  else
    printToAll("Couldn't find encounter discard pile to reshuffle.", { 1, 0, 0 })
  end

  -- disable flag
  Wait.time(function() isReshuffling = false end, 1)
end

---------------------------------------------------------
-- helper functions
---------------------------------------------------------

-- Simple method to check if the given point is in a specified area.  Local use only,
---@param point Vector.  Point to check, only x and z values are relevant
---@param bounds Table.  Defined area to see if the point is within.  See MAIN_PLAY_AREA for sample
--     bounds definition.
---@return Boolean.  True if the point is in the area defined by bounds
function inArea(point, bounds)
  return (point.x < bounds.upperLeft.x
    and point.x > bounds.lowerRight.x
    and point.z < bounds.upperLeft.z
    and point.z > bounds.lowerRight.z)
end

-- removes tokens from the provided card/deck
function removeTokensFromObject(object)
  for _, v in ipairs(searchArea(object.getPosition(), { 3, 1, 4 })) do
    local obj = v.hit_object
    if obj.getGUID() ~= "4ee1f2" and -- table
        obj ~= self and
        obj.type ~= "Deck" and
        obj.type ~= "Card" and
        obj.memo ~= nil and
        obj.getLock() == false and
        not tokenChecker.isChaosToken(obj) then
      TRASH.putObject(obj)
    end
  end
end

-- searches an area and optionally filters the result
function searchArea(origin, size, filter)
  local objList = Physics.cast({
    origin       = origin,
    direction    = { 0, 1, 0 },
    orientation  = self.getRotation(),
    type         = 3,
    size         = size,
    max_distance = 1
  })

  if filter then
    local filteredList = {}
    for _, obj in ipairs(objList) do
      if filter(obj.hit_object) then
        table.insert(filteredList, obj)
      end
    end
    return filteredList
  else
    return objList
  end
end

-- filter functions for searchArea
function isDeck(x) return x.tag == 'Deck' end

function isCardOrDeck(x) return x.tag == 'Card' or x.tag == 'Deck' end
