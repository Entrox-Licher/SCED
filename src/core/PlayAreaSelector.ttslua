require("core/PlayAreaImageData") -- this fills the variable "PLAYAREA_IMAGE_DATA"
local playAreaApi = require("core/PlayAreaApi")
local typeIndex, selectionIndex

function onSave() return JSON.encode({typeIndex = typeIndex, selectionIndex = selectionIndex}) end

function onLoad(savedData)
  self.createButton({
    function_owner = self,
    click_function = "onClick_toggleGallery",
    tooltip        = "Show Image Gallery",
    height         = 1500,
    width          = 1500,
    color          = { 1, 1, 1, 0 }
  })

  local loadedData = JSON.decode(savedData) or {}
  typeIndex        = loadedData.typeIndex or 1
  selectionIndex   = loadedData.selectionIndex or 1
  Wait.time(updatePlayareaGallery, 0.5)
end

-- click function for main button
function onClick_toggleGallery()
  Global.call("togglePlayareaGallery")
end

function onClick_defaultImage()
  playAreaApi.updateSurface()
  Global.call("togglePlayareaGallery")
end

function getDataSubTableByIndex(dataTable, index)
  local loopId = 1
  for i, v in pairs(dataTable) do
    if index == loopId then return v end
    loopId = loopId + 1
  end
  return {}
end

function updatePlayareaGallery()
  -- get subtables
  local dataForType = getDataSubTableByIndex(PLAYAREA_IMAGE_DATA, typeIndex)
  local dataForSelection = getDataSubTableByIndex(dataForType, selectionIndex)

  -- get global xml to insert elements
  local globalXml = UI.getXmlTable()

  -- selectable items
  local itemSelection = getXmlTableElementById(globalXml, 'itemSelection')
  itemSelection.children = {}

  local i = 0
  for itemName, _ in pairs(dataForType) do
    i = i + 1
    table.insert(itemSelection.children,
      {
        tag = "Panel",
        attributes = { class = "itemPanel", id = "typePanel" .. i },
        children = {
          tag = "Text",
          value = itemName,
          attributes = { class = "itemText", id = "typeListText" .. i }
        }
      })
  end

  -- selectable images for that item
  local playareaList = getXmlTableElementById(globalXml, 'playareaList')
  playareaList.children = {}

  for i, v in ipairs(dataForSelection) do
    table.insert(playareaList.children,
      {
        tag = "VerticalLayout",
        attributes = { class = "imageBox", id = "image" .. i },
        children = {
          {
            tag = 'Image',
            attributes = { class = "playareaImage", image = v.URL }
          },
          {
            tag = 'Text',
            value = v.Name,
            attributes = { class = "imageName" }
          }
        }
      })
  end

  playareaList.attributes.height = round(#playareaList.children / 2, 0) * 380
  UI.setXmlTable(globalXml)
  Wait.time(highlightTabAndItem, 0.1)
end

function onClick_imageTab(_, _, tabId)
  typeIndex = tonumber(tabId:sub(9))
  selectionIndex = 1
  updatePlayareaGallery()
end

function onClick_listItem(_, _, listId)
  selectionIndex = tonumber(listId:sub(10))
  updatePlayareaGallery()
end

function onClick_image(_, _, id)
  local imageIndex = tonumber(id:sub(6))
  local dataForType = getDataSubTableByIndex(PLAYAREA_IMAGE_DATA, typeIndex)
  local dataForSelection = getDataSubTableByIndex(dataForType, selectionIndex)
  local newURL = dataForSelection[imageIndex].URL
  playAreaApi.updateSurface(newURL)
  Global.call("togglePlayareaGallery")
end

function highlightTabAndItem()
  -- highlight active tab
  for i = 1, 5 do
    local color = "#888888"
    if i == typeIndex then color = "#ffffff" end
    UI.setAttribute("imageTab" .. i, "color", color)
  end

  -- highlight item
  UI.setAttribute("typePanel" .. selectionIndex, "color", "grey")
  UI.setAttribute("typeListText" .. selectionIndex, "color", "black")
end

-- loops through an XML table and returns the specified object
---@param ui Table XmlTable (get this via getXmlTable)
---@param id String Id of the object to return
function getXmlTableElementById(ui, id)
  for _, obj in ipairs(ui) do
    if obj.attributes and obj.attributes.id and obj.attributes.id == id then return obj end
    if obj.children then
      local result = getXmlTableElementById(obj.children, id)
      if result then return result end
    end
  end
  return nil
end

-- utility function
function round(num, numDecimalPlaces)
  local mult = 10 ^ (numDecimalPlaces or 0)
  return math.floor(num * mult + 0.5) / mult
end
