do
  local DeckImporterApi = {}
  local guidReferenceApi = require("core/GUIDReferenceApi")

  local function getDeckImporter()
    return guidReferenceApi.getObjectByOwnerAndType("Mythos", "DeckImporter")
  end

  ---@class uiStateTable
  ---@field redDeck string Deck ID to load for the red player
  ---@field orangeDeck string Deck ID to load for the orange player
  ---@field whiteDeck string Deck ID to load for the white player
  ---@field greenDeck string Deck ID to load for the green player
  ---@field privateDeck boolean True to load a private deck, false to load a public deck
  ---@field loadNewest boolean True if the most upgraded version of the deck should be loaded
  ---@field investigators boolean True if investigator cards should be spawned

  -- Returns a table with the full state of the UI, including options and deck IDs.
  -- This can be used to persist via onSave(), or provide values for a load operation
  ---@return uiStateTable uiStateTable Contains data about the current UI state
  DeckImporterApi.getUiState = function()
    local passthroughTable = {}
    for k,v in pairs(getDeckImporter().call("getUiState")) do
      passthroughTable[k] = v
    end
    return passthroughTable
  end

  -- Updates the state of the UI based on the provided table.  Any values not provided will be left the same.
  ---@return uiStateTable uiStateTable Contains data about the current UI state
  DeckImporterApi.setUiState = function(uiStateTable)
    return getDeckImporter().call("setUiState", uiStateTable)
  end

  -- Process the slot list, which defines the card Ids and counts of cards to load. Spawn those cards
  -- at the appropriate zones and report an error to the user if any could not be loaded.
  -- This is a callback function which handles the results of ArkhamDb.getDecklist()
  -- This method uses an encapsulated coroutine with yields to make the card spawning cleaner.
  --
  ---@param slots Table Key-Value table of cardId:count. cardId is the ArkhamDB ID of the card to spawn,
  --     and count is the number which should be spawned
  ---@param investigatorId String ArkhamDB ID (code) for this deck's investigator.
  --     Investigator cards should already be added to the slots list if they
  --     should be spawned, but this value is separate to check for special
  --     handling for certain investigators
  ---@param bondedList Table A table of cardID keys to meaningless values.  Card IDs in this list were added
  --     from a parent bonded card.
  ---@param customizations String ArkhamDB data for customizations on customizable cards
  ---@param playerColor String Color name of the player mat to place this deck on (e.g. "Red")
  ---@param loadAltInvestigator String Contains the name of alternative art for the investigator ("normal", "revised" or "promo")
  DeckImporterApi.loadCards = function(params)
    return getDeckImporter().call("loadCardsHelper", params)
  end

  DeckImporterApi.spawnDeckFromToken = function(coin, playerColor)
    return getDeckImporter().call("spawnDeckFromToken", {coin = coin, playerColor = playerColor})
  end

  -- Callback function for investigator cards and minicards to set the correct state for alt art
  ---@param card Object Card which needs to be set the state for
  ---@param loadAltInvestigator String Contains the name of alternative art for the investigator ("normal", "revised" or "promo")
  DeckImporterApi.loadAltArt = function(params)
    return getDeckImporter().call("loadAltArt", params)
  end

  return DeckImporterApi
end
