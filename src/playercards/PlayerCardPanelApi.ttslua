do
  local PlayerCardPanelApi = {}
  local guidReferenceApi = require("core/GUIDReferenceApi")

  local function getPlayerCardPanel()
    return guidReferenceApi.getObjectByOwnerAndType("Mythos", "PlayerCardPanel")
  end

  -- Will delete all laid out cards for the specified section of the table
  ---@param targetState The section of the table to delete cards from
  PlayerCardPanelApi.deleteAll = function(targetState)
    local targetState = targetState or "default"
    getPlayerCardPanel().call("swapState", targetState)
    return getPlayerCardPanel().call("deleteAll")
  end

  -- Spawn a given list of cards, but seperated into groups based on their card type (asset, event, or skill)
  ---@param cardlist List containing sublists for assets, events, and skills (and optionally limited versions of each), each sublist containing a list of card ids of cards to spawn
  ---@param name Uniquely identifying name for the group of cards to be spawned
  ---@param startPos String for the desired start position, based on those available in the PlayerCardPanel
  ---@param rotation The rotation for the cards to be spawned
  ---@param spread Boolean of whether to spread out the cards (true) or stack them in a deck (false)
  ---@param spreadCols Int of how many cards should be placed before starting a new row
  ---@param targetState String of what section of the table to spawn the cards, based on the option in PlayerCardPanel
  PlayerCardPanelApi.spawnCardsByType = function(params)
    return getPlayerCardPanel().call("spawnCardsByType", params)
  end

  -- Spawn a given list of cards
  ---@param cardlist List of card ids of cards to be spawned
  ---@param name Uniquely identifying name for the group of cards to be spawned
  ---@param startPos String for the desired start position, based on those available in the PlayerCardPanel
  ---@param rotation The rotation for the cards to be spawned
  ---@param spread Boolean of whether to spread out the cards (true) or stack them in a deck (false)
  ---@param spreadCols Int of how many cards should be placed before starting a new row
  ---@param targetState String of what section of the table to spawn the cards, based on the option in PlayerCardPanel
  PlayerCardPanelApi.spawnCardList = function(params)
    return getPlayerCardPanel().call("spawnCardList", params)
  end

  -- A simple way to find all the the cards that have been placed on the table by the PlayerCardPanel, in a specific section
  ---@param targetState The section of the table to look for cards
  ---@return All cards placed by the PlayerCardSpawner in the specified section
  PlayerCardPanelApi.getPlacedCards = function(targetState)
    return getPlayerCardPanel().call("getPlacedCards", targetState)
  end

  return PlayerCardPanelApi
end
