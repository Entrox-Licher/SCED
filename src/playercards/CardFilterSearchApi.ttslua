do
  local CardFilterSearchApi = {}
  local guidReferenceApi = require("core/GUIDReferenceApi")

  local function getCardFilterSearch()
    return guidReferenceApi.getObjectByOwnerAndType("Mythos", "CardFilterSearch")
  end

  -- Turns a string into a list of individual tokens
  ---@param filterString String to be broken down into tokens
  ---@return List of tokens, broken down from the given string
  CardFilterSearchApi.tokenizeString = function(filterString)
    -- Passthrough needed because of TTS's "cannot use resources from other files" error
    local passthroughList = {}
    for _, token in ipairs(getCardFilterSearch().call("tokenizeString", filterString)) do
      table.insert(passthroughList, token)
    end
    return passthroughList
  end

  -- Creates a list of cards based on a tokenized filter search string, and optionally a starting list of cards
  ---@param tokenList A list of tokens that will be iterated upon to establish filtering criteria
  ---@param startingCardSet Optional. If provided, filters will be applied only to given card set rather than the global pool
  ---@return List of cards that corresponds to the provided parameters
  CardFilterSearchApi.createFilterCardList = function(tokenList, startingCardSet)
    return getCardFilterSearch().call("createFilterCardList", {tokenList = tokenList, startingCardSet = startingCardSet})
  end

  return CardFilterSearchApi
end