do
  local AllCardsBagApi = {}
  local guidReferenceApi = require("core/GUIDReferenceApi")

  local function getAllCardsBag()
    return guidReferenceApi.getObjectByOwnerAndType("Mythos", "AllCardsBag")
  end

  -- Returns a specific card from the bag, based on ArkhamDB ID
  ---@param id table String ID of the card to retrieve
  ---@return table table
  --  If the indexes are still being constructed, an empty table is
  --  returned.  Otherwise, a single table with the following fields
  --    cardData: TTS object data, suitable for spawning the card
  --    cardMetadata: Table of parsed metadata
  AllCardsBagApi.getCardById = function(id)
    return getAllCardsBag().call("getCardById", {id = id})
  end

  -- Gets a random basic weakness from the bag.  Once a given ID has been returned
  -- it will be removed from the list and cannot be selected again until a reload
  -- occurs or the indexes are rebuilt, which will refresh the list to include all
  -- weaknesses.
  ---@return id String ID of the selected weakness.
  AllCardsBagApi.getRandomWeaknessId = function()
    return getAllCardsBag().call("getRandomWeaknessId")
  end

  AllCardsBagApi.isIndexReady = function()
    return getAllCardsBag().call("isIndexReady")
  end

  -- Called by Hotfix bags when they load.  If we are still loading indexes, then
  -- the all cards and hotfix bags are being loaded together, and we can ignore
  -- this call as the hotfix will be included in the initial indexing.  If it is
  -- called once indexing is complete it means the hotfix bag has been added
  -- later, and we should rebuild the index to integrate the hotfix bag.
  AllCardsBagApi.rebuildIndexForHotfix = function()
    return getAllCardsBag().call("rebuildIndexForHotfix")
  end

  -- Searches the bag for cards which match the given name and returns a list.  Note that this is
  -- an O(n) search without index support.  It may be slow.
  ---@param name String or string fragment to search for names
  ---@param exact Boolean Whether the name match should be exact
  AllCardsBagApi.getCardsByName = function(name, exact)
    return getAllCardsBag().call("getCardsByName", {name = name, exact = exact})
  end

  AllCardsBagApi.isBagPresent = function()
    return getAllCardsBag() and true
  end

  -- Used to index into the supplemental card indices 
  ---@param indexName exact string of the index variable to be referenced, minus the 'Index' part
  ---@param includeOthers boolean of whether or not to include non-player cards
  ---@param value key used to index into the dictionary
  ---@param value2 optional second key used to index into the sub-dictionary
  ---@return List of cards located at the precise index given the provided parameters
    AllCardsBagApi.getCardsByData = function(indexName, value, includeOthers, value2)
    return getAllCardsBag().call("getCardsByData", { indexName = indexName, value = value, value2 = value2, includeOthers = includeOthers })
  end

  AllCardsBagApi.getUniqueWeaknesses = function()
    return getAllCardsBag().call("getUniqueWeaknesses")
  end

  AllCardsBagApi.getOppositeCards = function(cardList, filter, includeOthers)
    local tempList = {}
    for _, v in ipairs(cardList) do
      table.insert(tempList, v)
    end
    return getAllCardsBag().call("getOppositeCards", {cardList = tempList, filter = filter, includeOthers = includeOthers})
  end

  AllCardsBagApi.sortCardsTable = function(cardsTable)
    local finalTable = {}
    for _, v in ipairs(getAllCardsBag().call("sortCardsTable", cardsTable)) do
      table.insert(finalTable, v)
    end
    return finalTable
  end

  return AllCardsBagApi
end