local playerCardPanelApi = require("playercards/PlayerCardPanelApi")
local allCardsBagApi = require("playercards/AllCardsBagApi")
local cardLookupTable = {
  faction =   function(specInstance, isUpgraded) return allCardsBagApi.getCardsByClassAndLevel({ class = specInstance, upgraded = isUpgraded }) end,
  trait   =   function(specInstance) return allCardsBagApi.getCardsByTrait(specInstance) end,
  special =   function(specInstance) return allCardsBagApi.getCardsBySpecialCriteria(specInstance) end
}

function onLoad()
  self.createButton({
    function_owner = self,
    label          = "Place Lvl 0",
    click_function = "placeCardsBasic",
    tooltip        = "Left-Click: Place cards!\nRight-Click: Clear cards!",
    position       = { -0.725, 0.1, 2.025 },
    color          = { 1, 1, 1 },
    width          = 675,
    height         = 175
  })
  self.createButton({
    function_owner = self,
    label          = "Place Lvl 1-5",
    click_function = "placeCardsUpgraded",
    tooltip        = "Left-Click: Place cards!\nRight-Click: Clear cards!",
    position       = { 0.725, 0.1, 2.025 },
    color          = { 1, 1, 1 },
    width          = 675,
    height         = 175
  })
end

function placeCardsBasic(_, _, alt_click)
  placeCards(false, alt_click)
end

function placeCardsUpgraded(_,_, alt_click)
  placeCards(true, alt_click)
end

function placeCards(isUpgraded, alt_click)
  if (alt_click) then
    --Clear all cards
    playerCardPanelApi.deleteAll()
  else
    --Determine investigator placed on object
    local investigator = nil
    for _, v in ipairs(searchOnObj(self)) do
      local obj = v.hit_object
      if obj.hasTag("Investigator") then
        investigator = obj
        break
      end
    end
    if not investigator then
      broadcastToAll("No Valid Investigator Card Detected", Color.Red)
      return
    end
    broadcastToAll("Investigator Detected: " .. investigator.getName(), Color.Green)
    deckOptions = JSON.decode(investigator.getGMNotes()).deck_options
    local cardSet = {}
    local cardList = {
      skillList = {},
      eventList = {},
      assetList = {}
    }
    --Find all cards eligible to be used by the target investigator
    for _, cardSpec in ipairs(deckOptions) do
      --determine what type of spec we are dealing with
      local specType = (cardSpec.faction and "faction") or (cardSpec.trait and "trait") or (cardSpec.special and "special")
      if not specType then
        log("Invalid Deckbuilding Specification:")
        log(cardSpec)
      else
        for _, specInstance in ipairs(cardSpec[specType]) do
          log(specInstance)
          if ((cardSpec.level.min == 0 and not isUpgraded) or (cardSpec.level.max > 0 and isUpgraded)) then
            for _, cardId in ipairs(cardLookupTable[specType](specInstance, isUpgraded)) do
              local cardMetadata = allCardsBagApi.getCardById({ id = cardId }).metadata
              if isUpgraded == (cardMetadata.level > 0) and cardMetadata.level >= cardSpec.level.min and cardMetadata.level <= cardSpec.level.max then
                insertCardSet(cardSet, cardList, cardMetadata, cardId)
              end
            end
          end
        end
      end
    end
    --Organizes the card lists, and presents them to the player
    cardList.skillList = allCardsBagApi.sortCardsTable(cardList.skillList)
    cardList.eventList = allCardsBagApi.sortCardsTable(cardList.eventList)
    cardList.assetList = allCardsBagApi.sortCardsTable(cardList.assetList)
    playerCardPanelApi.spawnCardsByType({
      cardList = cardList,
      name = "deckOptions",
      startPos = "deckBuilder",
      spread = true,
      spreadCols = 30
    })
  end
end


function insertCardSet(cardSet, cardList, cardMetadata, cardId)
  if not cardSet[cardId] then
    if cardMetadata.type == "Skill" then
      table.insert(cardList.skillList, cardId)
      cardSet[cardId] = true
      return true
    elseif cardMetadata.type == "Event" then
      table.insert(cardList.eventList, cardId)
      cardSet[cardId] = true
      return true
    elseif cardMetadata.type == "Asset" then
      table.insert(cardList.assetList, cardId)
      cardSet[cardId] = true
      return true
    end
  end
  return false
end


-- searches on an object (by using its bounds)
---@param obj Object Object to search on
function searchOnObj(obj)
  return Physics.cast({
    direction    = { 0, 1, 0 },
    max_distance = 0.5,
    type         = 3,
    size         = obj.getBounds().size,
    origin       = obj.getPosition()
  })
end

